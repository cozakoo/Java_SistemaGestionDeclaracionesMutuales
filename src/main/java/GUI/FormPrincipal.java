package GUI;

import com.mycompany.mutuales.*;
import static interfaz.IConsultaSql.consulta_complementaria_obtenerConcepto1;
import static interfaz.IConsultaSql.consulta_complementaria_obtenerConcepto2;
import interfaz.iCargaImagenes;
import static interfaz.iCargaImagenes.url_imagen_check;
import static interfaz.iCargaImagenes.url_imagen_control;
import static interfaz.iCargaImagenes.url_imagen_copy;
import static interfaz.iCargaImagenes.url_imagen_guardar;
import static interfaz.iCargaImagenes.url_imagen_importar;
import static interfaz.iCargaImagenes.url_imagen_incorrecto;
import static interfaz.iCargaImagenes.url_imagen_print;

import java.awt.*;
import static java.awt.SystemColor.window;
import java.awt.datatransfer.*;
import java.awt.image.BufferedImage;
import java.awt.print.*;
import java.io.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import java.util.logging.*;
import javax.imageio.ImageIO;

import javax.print.*;
import javax.swing.*;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;


public class FormPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FormPrincipal
     */
    private String dirActual;
    private Archivo archivo;
    private File selectedFile;
    private int concepto1Presentado;
    private int concepto2Presentado;
    
    public FormPrincipal() throws SQLException {
        initComponents();
        cargarImagenes();
        cargarComponentes();
        configuracionComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        MesesLiqjComboBox = new javax.swing.JComboBox<>();
        MutualesjComboBox = new javax.swing.JComboBox<>();
        ReclamojRadioButton = new javax.swing.JRadioButton();
        PrestamojRadioButton = new javax.swing.JRadioButton();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        rutaURL = new javax.swing.JLabel();
        javax.swing.JTabbedPane jTabbedPane2 = new javax.swing.JTabbedPane();
        jLabelDestino = new javax.swing.JLabel();
        javax.swing.JLabel jLabel15 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel16 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel17 = new javax.swing.JLabel();
        jLabelMutual = new javax.swing.JLabel();
        jLabelConcepto1 = new javax.swing.JLabel();
        jLabelOrigen = new javax.swing.JLabel();
        CargarArchivojLabel = new javax.swing.JLabel();
        ControljLabel = new javax.swing.JLabel();
        javax.swing.JLabel jLabel18 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel19 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel20 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        CopyjLabel1 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel14 = new javax.swing.JLabel();
        ImprimirjLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaErrores = new javax.swing.JTextArea();
        ControlFormatojLabel = new javax.swing.JLabel();
        TotaljLabel = new javax.swing.JLabel();
        CantidadRegistrosjLabel = new javax.swing.JLabel();
        BordeRojojTabbedPane = new javax.swing.JTabbedPane();
        lupaJlabel = new javax.swing.JLabel();
        javax.swing.JLabel jLabel21 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        GuardarjLabel = new javax.swing.JLabel();
        JlabelNroConcepto = new javax.swing.JLabel();
        javax.swing.JTabbedPane jTabbedPane3 = new javax.swing.JTabbedPane();
        javax.swing.JTabbedPane jTabbedPane1 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(670, 600));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jPanel1.setFont(new java.awt.Font("Roboto", 0, 10)); // NOI18N
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Mes de liquidacion");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, -1, 20));

        jLabel3.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 153, 204));
        jLabel3.setText("Errores");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 420, 60, 20));

        MesesLiqjComboBox.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MesesLiqjComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mayo", "Item 2", "Item 3", "Item 4" }));
        MesesLiqjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MesesLiqjComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(MesesLiqjComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 50, 160, 20));

        MutualesjComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MutualesjComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(MutualesjComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 100, 160, 20));

        ReclamojRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        ReclamojRadioButton.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        ReclamojRadioButton.setForeground(new java.awt.Color(51, 51, 51));
        ReclamojRadioButton.setText("Reclamos");
        ReclamojRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReclamojRadioButtonMouseClicked(evt);
            }
        });
        ReclamojRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReclamojRadioButtonActionPerformed(evt);
            }
        });
        jPanel1.add(ReclamojRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(545, 98, -1, -1));

        PrestamojRadioButton.setBackground(new java.awt.Color(255, 255, 255));
        PrestamojRadioButton.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        PrestamojRadioButton.setForeground(new java.awt.Color(51, 51, 51));
        PrestamojRadioButton.setText("Prestamos");
        PrestamojRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrestamojRadioButtonActionPerformed(evt);
            }
        });
        jPanel1.add(PrestamojRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(454, 98, -1, -1));

        jLabel7.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(51, 51, 51));
        jLabel7.setText("Tipo de archivo:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 100, -1, -1));

        rutaURL.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        rutaURL.setForeground(new java.awt.Color(51, 51, 51));
        jPanel1.add(rutaURL, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 240, 580, 20));

        jTabbedPane2.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane2.setForeground(new java.awt.Color(0, 153, 204));
        jPanel1.add(jTabbedPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 40, 615, 40));

        jLabelDestino.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabelDestino.setForeground(new java.awt.Color(51, 51, 51));
        jLabelDestino.setText("-");
        jPanel1.add(jLabelDestino, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 220, 470, -1));

        jLabel15.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(51, 51, 51));
        jLabel15.setText("concepto:");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, -1, -1));

        jLabel16.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(51, 51, 51));
        jLabel16.setText("Destino");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, -1, -1));

        jLabel17.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(51, 51, 51));
        jLabel17.setText("Total:");
        jPanel1.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 390, -1, -1));

        jLabelMutual.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabelMutual.setForeground(new java.awt.Color(51, 51, 51));
        jLabelMutual.setText("-");
        jPanel1.add(jLabelMutual, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 130, 470, -1));

        jLabelConcepto1.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabelConcepto1.setForeground(new java.awt.Color(51, 51, 51));
        jLabelConcepto1.setText("-");
        jPanel1.add(jLabelConcepto1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, 80, -1));

        jLabelOrigen.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabelOrigen.setForeground(new java.awt.Color(51, 51, 51));
        jLabelOrigen.setText("-");
        jPanel1.add(jLabelOrigen, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 190, 470, -1));

        CargarArchivojLabel.setFont(new java.awt.Font("Roboto", 0, 10)); // NOI18N
        CargarArchivojLabel.setText(" Cargar archivo");
        CargarArchivojLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CargarArchivojLabelMouseClicked(evt);
            }
        });
        jPanel1.add(CargarArchivojLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 100, -1, -1));

        ControljLabel.setFont(new java.awt.Font("Roboto", 0, 10)); // NOI18N
        ControljLabel.setText("  Control");
        ControljLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ControljLabelMouseClicked(evt);
            }
        });
        jPanel1.add(ControljLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(652, 149, 90, -1));

        jLabel18.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(51, 51, 51));
        jLabel18.setText("Mutual:");
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 130, -1, -1));

        jLabel19.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(51, 51, 51));
        jLabel19.setText("Control de formato:");
        jPanel1.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 330, -1, -1));

        jLabel20.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(51, 51, 51));
        jLabel20.setText("Cantidad de registros:");
        jPanel1.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 360, -1, -1));

        jLabel6.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 153, 204));
        jLabel6.setText("Prestamos y reclamos");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, -1, -1));

        jLabel8.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 153, 204));
        jLabel8.setText("Control de Archivos");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 290, -1, -1));

        CopyjLabel1.setFont(new java.awt.Font("Roboto", 0, 10)); // NOI18N
        CopyjLabel1.setForeground(new java.awt.Color(102, 102, 102));
        CopyjLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CopyjLabel1MouseClicked(evt);
            }
        });
        jPanel1.add(CopyjLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 450, 30, 30));

        jLabel14.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(51, 51, 51));
        jLabel14.setText("Seleccione mutual");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, -1, -1));

        ImprimirjLabel1.setFont(new java.awt.Font("Roboto", 0, 10)); // NOI18N
        ImprimirjLabel1.setForeground(new java.awt.Color(51, 51, 51));
        ImprimirjLabel1.setText("Imprimir");
        ImprimirjLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ImprimirjLabel1MouseClicked(evt);
            }
        });
        jPanel1.add(ImprimirjLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 503, 82, 40));

        jScrollPane1.setRequestFocusEnabled(false);
        jScrollPane1.setRowHeaderView(null);
        jScrollPane1.setVerifyInputWhenFocusTarget(false);

        jTextAreaErrores.setColumns(20);
        jTextAreaErrores.setFont(new java.awt.Font("Roboto Light", 0, 10)); // NOI18N
        jTextAreaErrores.setRows(5);
        jScrollPane1.setViewportView(jTextAreaErrores);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 450, 500, 180));
        jPanel1.add(ControlFormatojLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 330, 20, 20));

        TotaljLabel.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        TotaljLabel.setText("-----");
        jPanel1.add(TotaljLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 390, 169, -1));

        CantidadRegistrosjLabel.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        CantidadRegistrosjLabel.setText("-----");
        jPanel1.add(CantidadRegistrosjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 352, 80, 33));

        BordeRojojTabbedPane.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 102), 2, true));
        jPanel1.add(BordeRojojTabbedPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 445, 510, 190));

        lupaJlabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lupaJlabelMouseClicked(evt);
            }
        });
        jPanel1.add(lupaJlabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(652, 190, 50, 40));

        jLabel21.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(51, 51, 51));
        jLabel21.setText("Origen:");
        jPanel1.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 190, -1, -1));

        jLabel4.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 51, 51));
        jLabel4.setText("Concepto:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 330, -1, -1));

        GuardarjLabel.setFont(new java.awt.Font("Roboto", 0, 10)); // NOI18N
        GuardarjLabel.setForeground(new java.awt.Color(51, 51, 51));
        GuardarjLabel.setText("Guardar");
        GuardarjLabel.setEnabled(false);
        GuardarjLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GuardarjLabelMouseClicked(evt);
            }
        });
        jPanel1.add(GuardarjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 350, -1, -1));

        JlabelNroConcepto.setFont(new java.awt.Font("Roboto", 0, 12)); // NOI18N
        JlabelNroConcepto.setForeground(new java.awt.Color(51, 51, 51));
        jPanel1.add(JlabelNroConcepto, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 328, 60, 20));
        jPanel1.add(jTabbedPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 320, 610, 90));
        jPanel1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 90, 615, 180));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(774, 698));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void GuardarjLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuardarjLabelMouseClicked

        if (jTextAreaErrores.getText().isEmpty() && GuardarjLabel.isEnabled()) {

            try {
                
                String nombreMutual = (String) MutualesjComboBox.getSelectedItem();
                Informe informe;
                informe = new Informe(
                        Utilidades.obtenerIdMutual(nombreMutual),
                        archivo.getConceptoPresentado(),
                        nombreMutual,
                        jLabelDestino.getText(),
                        Utilidades.obtenerTipoArchivoMutual(ReclamojRadioButton),
                        MesesLiqjComboBox.getSelectedItem().toString()
                );
                if (!informe.existe()) {
                    informe.insertarEnBaseDeDatos();
                }

                GuardarjLabel.setEnabled(false);

            } catch (SQLException ex) {
                Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);

            }
            try {
                guardarConNuevoNombreYUbicacion();
            } catch (IOException ex) {
                Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_GuardarjLabelMouseClicked

    private void lupaJlabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lupaJlabelMouseClicked

        if (archivo != null) {
            String filePath = archivo.getRutaArchivo();
            if (Desktop.isDesktopSupported()) {
                Desktop desktop = Desktop.getDesktop();
                File fileToOpen = new File(filePath);

                try {
                    // Abrir el archivo con el editor de texto predeterminado
                    desktop.open(fileToOpen);
                } catch (IOException e) {
                    // Manejar cualquier excepción de E/S (por ejemplo, archivo no encontrado, etc.)
                    e.printStackTrace();
                }
            } else {
                // El escritorio no es compatible, puedes proporcionar un mensaje alternativo
                System.out.println("El escritorio no es compatible para abrir archivos.");
            }
        } else {
            System.out.println("vacio");
        }
    }//GEN-LAST:event_lupaJlabelMouseClicked

    private void ImprimirjLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImprimirjLabel1MouseClicked
        if (!jTextAreaErrores.getText().isEmpty()) {
            // Genera un archivo TXT
            String nombreTxt = "output.txt";
            Txt txt = new Txt(nombreTxt);

            txt.agregarCabecera(
                    MutualesjComboBox.getSelectedItem().toString(),
                    MesesLiqjComboBox.getSelectedItem().toString(),
                    Utilidades.obtenerTipoArchivoMutual(ReclamojRadioButton)
            );
            txt.agregarErrores(jTextAreaErrores.getText());

            /**
             * SI NO ES NECESARIO GENERAR UN TXT, ENTONCES COMENTO EL BLOQUE TRY
             */
            try {
                FileWriter writer = new FileWriter(txt.getNombreArchivo());
                writer.write(txt.getArchivoCompleto());
                writer.close();
            } catch (IOException ex) {
                Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }

            //Obtiene el nombre de la impresora seleccionada del JComboBox
            Impresora impresora = new Impresora();
            try {
                impresora.crearTrabajoImpresio(PrinterJob.getPrinterJob(), txt);
            } catch (PrinterException ex) {
                Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ImprimirjLabel1MouseClicked

    private void CopyjLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CopyjLabel1MouseClicked
        if (!jTextAreaErrores.getText().isEmpty()) {
            String text = jTextAreaErrores.getText();
            StringSelection stringSelection = new StringSelection(text);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, null);

            Utilidades.mensajeExito("Texto copiado a portapapeles");
        }
    }//GEN-LAST:event_CopyjLabel1MouseClicked

    private void ControljLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ControljLabelMouseClicked
        // TODO add your handling code here:
        if (archivo != null) {
            StringBuilder erroresConcatenados = new StringBuilder();
            System.out.println("LISTA DE ERRORES");
            archivo.listarErrores();
            if (!archivo.getListaTotalErrores().isEmpty()) {
                erroresConcatenados.append("Mutual/Asociacion  " + MutualesjComboBox.getSelectedItem().toString() + "\n");
                erroresConcatenados.append("Mes de Control     " + MesesLiqjComboBox.getSelectedItem().toString() + "\n");
                erroresConcatenados.append("Tipo de archivo    " + Utilidades.obtenerTipoArchivoMutual(ReclamojRadioButton) + "\n" + "\n");

                for (String error : archivo.getListaTotalErrores()) {
                    erroresConcatenados.append(error + "\n"); // Agregar un salto de línea al final de cada error
                }
            } else {
                //            erroresConcatenados.append("Mutual/Asociacion  " + MutualesjComboBox.getSelectedItem().toString() + "\n");
                //            erroresConcatenados.append("Mes de Control     " + MesesLiqjComboBox.getSelectedItem().toString() + "\n");
                //            erroresConcatenados.append("Tipo de archivo    " + Utilidades.obtenerTipoArchivoMutual(ReclamojRadioButton) + "\n" + "\n" + "\n");

            }
            jTextAreaErrores.setText(erroresConcatenados.toString());
            jTextAreaErrores.setCaretPosition(0);

            cargarDatosControlArchivo(archivo);
        }
    }//GEN-LAST:event_ControljLabelMouseClicked

    private void CargarArchivojLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CargarArchivojLabelMouseClicked
        if (PrestamojRadioButton.isSelected() || ReclamojRadioButton.isSelected()) {
            // Ocultar la ventana principal
            this.setVisible(false);

            // Mostrar la pantalla de carga
            Loading loading = new Loading();

            // Realizar la operación de selección de archivo en un hilo de fondo
            Thread thread = new Thread(() -> {
                // Realizar la operación de selección de archivo
                File downloadsDirectory = new File(System.getProperty("user.home") + "\\Downloads");
                if (!downloadsDirectory.exists()) {
                    downloadsDirectory = new File(System.getProperty("user.home") + "/Downloads");
                }
                javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser(downloadsDirectory);
                fileChooser.addChoosableFileFilter(new Filter());
                fileChooser.setAcceptAllFileFilterUsed(false);
                int returnValue = fileChooser.showOpenDialog(null);
              

                // Cerrar la pantalla de carga después de seleccionar el archivo
                loading.dispose();

                // Mostrar la ventana principal nuevamente
                this.setVisible(true);

                // Verificar si se seleccionó un archivo
                if (returnValue == javax.swing.JFileChooser.APPROVE_OPTION) {
                    loading.setVisible(true);

                    selectedFile = fileChooser.getSelectedFile();
                    String nombreMutual = (String) MutualesjComboBox.getSelectedItem();
                    int numero_mes = obtenerNumeroMes(MesesLiqjComboBox.getSelectedItem().toString());
                    int numero_nio = obtenerAnio(MesesLiqjComboBox.getSelectedItem().toString());

                    if (ReclamojRadioButton.isSelected()) {
                        archivo = new ArchivoReclamo(selectedFile.getAbsolutePath(), nombreMutual, numero_mes, numero_nio);

                    } else {
                        archivo = new ArchivoPrestamo(selectedFile.getAbsolutePath(), nombreMutual, numero_mes, numero_nio);
                    }
                    cargarDatosCuadroMutual(selectedFile.getName());
                    limpiarCuadroControl();
                    loading.dispose();
                }
            });
            thread.start();
        } else {
            Utilidades.mensajeAdvertencia("Seleccione el tipo de Archivo Prestamo/Reclamo");
        }
    }//GEN-LAST:event_CargarArchivojLabelMouseClicked
    
    private void limpiarCargaPrevia(){
        GuardarjLabel.setEnabled(false);
        archivo = null;
        rutaURL.setText("");
    }
    private void PrestamojRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrestamojRadioButtonActionPerformed
        if (PrestamojRadioButton.isSelected()) {
            limpiarCargaPrevia();
            limpiarCuadroControl();
            try {
                ReclamojRadioButton.setSelected(false);
                String nombreMutual = (String) MutualesjComboBox.getSelectedItem();
                
                String tipo = "A";
                                int id = Utilidades.obtenerIdMutual(nombreMutual);
                String concepto1 = obtenerConcepto1(id, tipo);
                String concepto2 = obtenerConcepto2(id, tipo);

                if (concepto2.length() < 4) {
                    jLabelConcepto1.setText(concepto1);
                } else {
                    jLabelConcepto1.setText(concepto1 + "      " + concepto2);
                }
                jLabelMutual.setText(nombreMutual);
                jLabelOrigen.setText(obtenerOrigen(id, tipo));
                jLabelDestino.setText(obtenerDestino(id, tipo));

            } catch (SQLException ex) {
                Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_PrestamojRadioButtonActionPerformed

    private void ReclamojRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReclamojRadioButtonActionPerformed
        if (ReclamojRadioButton.isSelected()) {
            limpiarCargaPrevia();
            limpiarCuadroControl();
            try {
                PrestamojRadioButton.setSelected(false);
                String nombreMutual = (String) MutualesjComboBox.getSelectedItem();
                String tipo = "R";
                
                int id = Utilidades.obtenerIdMutual(nombreMutual);
                String concepto1 = obtenerConcepto1(id, tipo);
                String concepto2 = obtenerConcepto2(id, tipo);

                if (concepto2.length() < 4) {
                    jLabelConcepto1.setText(concepto1);
                } else {
                    jLabelConcepto1.setText(concepto1 + "      " + concepto2);
                }
                jLabelMutual.setText(nombreMutual);
                jLabelOrigen.setText(obtenerOrigen(id, tipo));
                jLabelDestino.setText(obtenerDestino(id, tipo));

            } catch (SQLException ex) {
                Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ReclamojRadioButtonActionPerformed

    private void MutualesjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MutualesjComboBoxActionPerformed

        jLabelMutual.setText((String) MutualesjComboBox.getSelectedItem());

        if (ReclamojRadioButton.isSelected()) {
            try {
                PrestamojRadioButton.setSelected(false);
                String nombreMutual = (String) MutualesjComboBox.getSelectedItem();
                String tipo = "R";
                int id = Utilidades.obtenerIdMutual(nombreMutual);
                String concepto1 = obtenerConcepto1(id, tipo);
                String concepto2 = obtenerConcepto2(id, tipo);

                if (concepto2.length() < 4) {
                    jLabelConcepto1.setText(concepto1);
                } else {
                    jLabelConcepto1.setText(concepto1 + "      " + concepto2);
                }                jLabelOrigen.setText(obtenerOrigen(id, tipo));
                jLabelDestino.setText(obtenerDestino(id, tipo));

            } catch (SQLException ex) {
                Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (PrestamojRadioButton.isSelected()) {
            try {
                ReclamojRadioButton.setSelected(false);
                String nombreMutual = (String) MutualesjComboBox.getSelectedItem();
                String tipo = "A";
                int id = Utilidades.obtenerIdMutual(nombreMutual);
                String concepto1 = obtenerConcepto1(id, tipo);
                String concepto2 = obtenerConcepto2(id, tipo);

                if (concepto2.length() < 4) {
                    jLabelConcepto1.setText(concepto1);
                } else {
                    jLabelConcepto1.setText(concepto1 + "      " + concepto2);
                }                jLabelOrigen.setText(obtenerOrigen(id, tipo));
                jLabelDestino.setText(obtenerDestino(id, tipo));

            } catch (SQLException ex) {
                Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_MutualesjComboBoxActionPerformed

    private void MesesLiqjComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MesesLiqjComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MesesLiqjComboBoxActionPerformed

    private void ReclamojRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReclamojRadioButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_ReclamojRadioButtonMouseClicked

    private void cargarImagenes() {
        dirActual = System.getProperty("user.dir");

        CargarArchivojLabel.setIcon(new javax.swing.ImageIcon(dirActual + url_imagen_importar));
        ControljLabel.setIcon(new javax.swing.ImageIcon(dirActual + url_imagen_control));
        GuardarjLabel.setIcon(new javax.swing.ImageIcon(dirActual + url_imagen_guardar));
        ImprimirjLabel1.setIcon(new javax.swing.ImageIcon(dirActual + url_imagen_print));
        CopyjLabel1.setIcon(new javax.swing.ImageIcon(dirActual + url_imagen_copy));
        lupaJlabel.setIcon(new javax.swing.ImageIcon(dirActual + iCargaImagenes.url_imagen_lupa));

        try {
            BufferedImage iconImage = ImageIO.read(new File(dirActual + "\\images\\icono.png"));

            // Establecer la imagen como ícono de la aplicación
            this.setIconImage(iconImage);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void cargarComponentes() throws SQLException {
        BordeRojojTabbedPane.setVisible(false);
        obtenerMeses();
        MutualesjComboBox.setModel(Utilidades.obtenerMutuales());
        obtenerImpresoras();

    }

    /**
     * Obtiene y llena un JComboBox con los nombres de los 12 meses, comenzando
     * desde el mes actual y retrocediendo un año si es necesario.
     */
    private void obtenerMeses() {
        Calendar calendario = Calendar.getInstance();
        int añoActual = calendario.get(Calendar.YEAR);

        // Crear un array para almacenar los nombres de los meses
        String[] nombresMeses = new String[12];
        int mesActual = 1;  // Empieza desde enero (mes 1)

        // Llenar el array con los nombres de los meses
        for (int i = 0; i < 12; i++) {
            nombresMeses[i] = Utilidades.obtenerNombreMes(mesActual) + " " + añoActual;
            // Retroceder un mes para el próximo ciclo del bucle
            mesActual++;
        }

        // Crear el JComboBox y agregar los nombres de los meses
        ComboBoxModel<String> nuevoModelo = new DefaultComboBoxModel<>(nombresMeses);
        MesesLiqjComboBox.setModel(nuevoModelo);
    }

    private void obtenerImpresoras() {
        PrintService[] impresoras = PrintServiceLookup.lookupPrintServices(null, null);
        String[] nombresImpresoras = new String[impresoras.length];
        for (int i = 0; i < impresoras.length; i++) {
            nombresImpresoras[i] = impresoras[i].getName();
        }
        ComboBoxModel<String> nuevoModelo = new DefaultComboBoxModel<>(nombresImpresoras);
    }

    private void cargarDatosCuadroMutual(String name) {
        try {
            String nombreMutual = (String) MutualesjComboBox.getSelectedItem();
            String tipo = Utilidades.obtenerTipoMutual(ReclamojRadioButton);

            jLabelMutual.setText(nombreMutual);
            jLabelOrigen.setText(name);

            rutaURL.setText(archivo.getRutaArchivo());

            int id = Utilidades.obtenerIdMutual(nombreMutual);
            String concepto1 = obtenerConcepto1(id, tipo);
            String concepto2 = obtenerConcepto2(id, tipo);

            if (concepto2.length() < 4) {
                jLabelConcepto1.setText(concepto1);
            } else {
                jLabelConcepto1.setText(concepto1 + "      " + concepto2);
            }

            jLabelDestino.setText(obtenerDestino(id, tipo));
        } catch (SQLException ex) {
            Logger.getLogger(FormPrincipal.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String obtenerConcepto2(int id, String tipo) throws SQLException {
        try (PreparedStatement pstmt = DataBase.getInstance(true).getPreparedStatement(consulta_complementaria_obtenerConcepto2)) {
            pstmt.setInt(1, id);
            pstmt.setString(2, tipo);

            try (ResultSet result = pstmt.executeQuery()) {
                if (result.next()) {
                    return result.getString("concepto2");
                } else {
                    // Manejo de casos en los que no se encuentra ningún resultado
                    return null;
                }
            }
        }
    }

    private String obtenerConcepto1(int id, String tipo) throws SQLException {
        try (PreparedStatement pstmt = DataBase.getInstance(true).getPreparedStatement(consulta_complementaria_obtenerConcepto1)) {
            pstmt.setInt(1, id);
            pstmt.setString(2, tipo);

            try (ResultSet result = pstmt.executeQuery()) {
                if (result.next()) {
                    return result.getString("concepto1");
                } else {
                    // Manejo de casos en los que no se encuentra ningún resultado
                    return null;
                }
            }
        }
    }

    private String obtenerDestino(int id, String tipo) throws SQLException {
        ResultSet result = DataBase.getInstance(true).consulta("select destino from complementaria where id_mutual = " + id + " AND  tipo_archivo = '" + tipo + "'");
        result.next();
        return result.getString(1);
    }

    private void configuracionComponentes() {
        jTextAreaErrores.setEditable(false);
        Font newFont = new Font("Roboto", Font.PLAIN, 12);
        jTextAreaErrores.setFont(newFont);

    }

    private void cargarDatosControlArchivo(Archivo archivo) {
        // jTextAreaErrores.setText("TEXTO DE PRUEBA");
        ControlFormatojLabel.setVisible(true);
        if (!jTextAreaErrores.getText().isEmpty()) {
            ControlFormatojLabel.setIcon(new javax.swing.ImageIcon(dirActual + url_imagen_incorrecto));
            CantidadRegistrosjLabel.setText(Integer.toString(archivo.getTotalRegistros()));
            BordeRojojTabbedPane.setVisible(true);
            GuardarjLabel.setEnabled(false);
        } else {
            ControlFormatojLabel.setIcon(new javax.swing.ImageIcon(dirActual + url_imagen_check));
            CantidadRegistrosjLabel.setText(Integer.toString(archivo.getTotalRegistros()));
            DecimalFormat formatoDinero = new DecimalFormat("#.00");
            String importeTotal = formatoDinero.format(archivo.getTotalImporte());
            TotaljLabel.setText(importeTotal);
            BordeRojojTabbedPane.setVisible(false);
            JlabelNroConcepto.setText(Integer.toString(archivo.getConceptoPresentado()));
            GuardarjLabel.setEnabled(true);
            
            
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JTabbedPane BordeRojojTabbedPane;
    javax.swing.JLabel CantidadRegistrosjLabel;
    javax.swing.JLabel CargarArchivojLabel;
    javax.swing.JLabel ControlFormatojLabel;
    javax.swing.JLabel ControljLabel;
    javax.swing.JLabel CopyjLabel1;
    javax.swing.JLabel GuardarjLabel;
    javax.swing.JLabel ImprimirjLabel1;
    javax.swing.JLabel JlabelNroConcepto;
    javax.swing.JComboBox<String> MesesLiqjComboBox;
    javax.swing.JComboBox<String> MutualesjComboBox;
    javax.swing.JRadioButton PrestamojRadioButton;
    javax.swing.JRadioButton ReclamojRadioButton;
    javax.swing.JLabel TotaljLabel;
    javax.swing.JLabel jLabelConcepto1;
    javax.swing.JLabel jLabelDestino;
    javax.swing.JLabel jLabelMutual;
    javax.swing.JLabel jLabelOrigen;
    javax.swing.JPanel jPanel1;
    javax.swing.JScrollPane jScrollPane1;
    javax.swing.JTextArea jTextAreaErrores;
    javax.swing.JLabel lupaJlabel;
    javax.swing.JLabel rutaURL;
    // End of variables declaration//GEN-END:variables

    private void limpiarCuadroControl() {
        ControlFormatojLabel.setVisible(false);
        CantidadRegistrosjLabel.setText("");
        TotaljLabel.setText("");
        jTextAreaErrores.setText("");
        BordeRojojTabbedPane.setVisible(false);
        JlabelNroConcepto.setText("");
    }

    
    
    private void copiarArchivos(Path rutaOrigen,Path rutaDestino){
       boolean confirrmacion = true;
        try {
                if (Files.exists(rutaDestino)) 
                {
                    confirrmacion = Utilidades.mensajeConfirmar("Existe un archivo con ese nombre desea reemplazarlo?", "Confirmacion");          
                }
                
                if(confirrmacion)
                {
                        Files.copy(rutaOrigen, rutaDestino, StandardCopyOption.REPLACE_EXISTING);
                        Utilidades.mensajeExito("Archivo guardado exitosamente");
                }
                else{
                     Utilidades.mensajeAdvertencia("guardado de archivo Cancelado");
                }
                // Copia el archivo del origen al destino
          
            } catch (Exception e) {
                Utilidades.mensajeAdvertencia("No se pudo guardar el archivo, intente denuevo");
            }
    }
    private void guardarConNuevoNombreYUbicacion() throws IOException {

        JFileChooser fileChooser = new JFileChooser();

        // Establecer el modo de selección de archivo a solo directorios
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        // Mostrar el diálogo de selección de archivo
        int resultado = fileChooser.showSaveDialog(null);

        // Verificar si el usuario seleccionó un directorio y clicó en "Guardar"
        if (resultado == JFileChooser.APPROVE_OPTION) {
            // Obtener el directorio seleccionado por el usuario
            File carpetaSeleccionada = fileChooser.getSelectedFile();
            
            // Obtener el nombre del archivo original
            Path rutaOrigen = Paths.get(this.selectedFile.getAbsolutePath());
            
            
            // Obtener el nombre del archivo de destino del JLabel (puedes usar jLabelDestino.getText() si es lo que necesitas)
            String nombreArchivoDestino = jLabelDestino.getText().trim();
            System.out.println(Paths.get(carpetaSeleccionada.getAbsolutePath(), nombreArchivoDestino).toString());
            Path rutaDestino = Paths.get(carpetaSeleccionada.getAbsolutePath(), nombreArchivoDestino);
             
            if (!nombreArchivoDestino.isEmpty()) 
            { // Verificar si el nombre no está vacío
                // Crear el nuevo archivo en la carpeta seleccionada con el nombre especificado
                copiarArchivos(rutaOrigen, rutaDestino);
              
            } 
        }
    }

    private static int obtenerNumeroMes(String entrada) {
        // Divide la entrada en palabras separadas por espacio
        String[] partes = entrada.split(" ");

        // Obtiene el primer elemento, que debería ser el nombre del mes
        String nombreMes = partes[0];

        // Usa el método obtenerNumeroMes que definimos anteriormente
        switch (nombreMes.toLowerCase()) {
            case "enero":
                return 1;
            case "febrero":
                return 2;
            case "marzo":
                return 3;
            case "abril":
                return 4;
            case "mayo":
                return 5;
            case "junio":
                return 6;
            case "julio":
                return 7;
            case "agosto":
                return 8;
            case "septiembre":
                return 9;
            case "octubre":
                return 10;
            case "noviembre":
                return 11;
            case "diciembre":
                return 12;
            default:
                return 0; // Devuelve 0 si el nombre del mes no coincide con ninguno de los casos
        }
    }

    private String obtenerOrigen(int id, String tipo) throws SQLException {
        ResultSet result = DataBase.getInstance(true).consulta("select origen from complementaria where id_mutual = " + id + " AND  tipo_archivo = '" + tipo + "'");
        result.next();
        return result.getString(1);
    }

    private int obtenerAnio(String toString) {
        // Divide la entrada en palabras separadas por espacio
        String[] partes = toString.split(" ");

        // Obtiene el primer elemento, que debería ser el nombre del mes
        String numeroMes = partes[1];

        return Integer.parseInt(numeroMes);
    }
}
